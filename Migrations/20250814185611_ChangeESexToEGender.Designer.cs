// <auto-generated />
using System;
using Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace fisio_api.Migrations
{
    [DbContext(typeof(FisioDbContext))]
    [Migration("20250814185611_ChangeESexToEGender")]
    partial class ChangeESexToEGender
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Code");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.OwnsOne("Domain.Address", "Address", b1 =>
                        {
                            b1.Property<string>("CustomerCode")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("CustomerCode");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerCode");
                        });

                    b.OwnsOne("Domain.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<string>("CustomerCode")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("CPF")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Education")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("FatherName")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("MotherName")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("WhatsAppNumber")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("CustomerCode");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerCode");
                        });

                    b.OwnsOne("Domain.Ensurance", "Ensurance", b1 =>
                        {
                            b1.Property<string>("CustomerCode")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("CustomerCode");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerCode");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ContactInfo")
                        .IsRequired();

                    b.Navigation("Ensurance");
                });
#pragma warning restore 612, 618
        }
    }
}
